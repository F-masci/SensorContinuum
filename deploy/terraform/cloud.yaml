AWSTemplateFormatVersion: "2010-09-09"
Description: "Aurora PostgreSQL Serverless v2 con PostGIS, DNS failover e inizializzazione SQL"

Parameters:
  DBMasterUsername:
    Type: String
    Default: sensorcontinuum_user
    Description: Username master
  DBMasterPassword:
    Type: String
    NoEcho: true
    Description: Password master
  InitSQLBucket:
    Type: String
    Description: Bucket S3 contenente lo script SQL di inizializzazione
  InitSQLKey:
    Type: String
    Description: Percorso dello script SQL nel bucket S3

Resources:
  # -----------------------------
  # VPC e Subnet
  # -----------------------------
  Region001VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  Region001Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Region001VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]

  Region001Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Region001VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]

  Region002VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16

  Region002Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Region002VPC
      CidrBlock: 10.1.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]

  Region002Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Region002VPC
      CidrBlock: 10.1.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group Aurora Serverless"
      SubnetIds:
        - !Ref Region001Subnet1
        - !Ref Region001Subnet2

  # -----------------------------
  # Aurora Serverless
  # -----------------------------

  # Security Group per Aurora
  AuroraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group per Aurora Serverless"
      VpcId: !Ref Region001VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16   # oppure specifica il CIDR o altri SG da cui vuoi accedere

  AuroraServerlessCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: "17.5"
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      DatabaseName: sensorcontinuum
      VpcSecurityGroupIds:
        - !Ref AuroraSecurityGroup
      StorageEncrypted: true

  # -----------------------------
  # Route53 Hosted Zone privata
  # -----------------------------
  SensorContinuumHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: sensorcontinuum.local
      VPCs:
        - VPCId: !Ref Region001VPC
          VPCRegion: !Ref "AWS::Region"
        - VPCId: !Ref Region002VPC
          VPCRegion: !Ref "AWS::Region"
      HostedZoneConfig:
        Comment: "Private hosted zone interna per sensorcontinuum"

  # -----------------------------
  # Health Check
  # -----------------------------
  AuroraHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Type: TCP
        FullyQualifiedDomainName: !GetAtt AuroraServerlessCluster.Endpoint.Address
        Port: 5432
        RequestInterval: 30
        FailureThreshold: 3

  # -----------------------------
  # Route53 RecordSet con Failover
  # -----------------------------
  MetadataDbRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref SensorContinuumHostedZone
      Name: metadata-db.cloud.sensorcontinuum.local
      Type: CNAME
      SetIdentifier: primary
      Failover: PRIMARY
      TTL: 60
      ResourceRecords:
        - !GetAtt AuroraServerlessCluster.Endpoint.Address
      HealthCheckId: !Ref AuroraHealthCheck

  # -----------------------------
  # Lambda per inizializzazione SQL
  # -----------------------------
  InitSQLLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InitMetadataDb
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Timeout: 300
      MemorySize: 256
      Role: arn:aws:iam::975050105348:role/LabRole
      Environment:
        Variables:
          DB_HOST: !GetAtt AuroraServerlessCluster.Endpoint.Address
          DB_USER: !Ref DBMasterUsername
          DB_PASSWORD: !Ref DBMasterPassword
          DB_NAME: sensorcontinuum
          S3_BUCKET: !Ref InitSQLBucket
          S3_KEY: !Ref InitSQLKey
      Code:
        ZipFile: |
          import os
          import psycopg2
          import boto3
          
          def lambda_handler(event, context):
              bucket = os.environ['S3_BUCKET']
              key = os.environ['S3_KEY']
              db_host = os.environ['DB_HOST']
              db_name = os.environ['DB_NAME']
              db_user = os.environ['DB_USER']
              db_password = os.environ['DB_PASSWORD']
          
              s3 = boto3.client('s3')
              obj = s3.get_object(Bucket=bucket, Key=key)
              sql_script = obj['Body'].read().decode('utf-8')
          
              conn = psycopg2.connect(host=db_host, dbname=db_name, user=db_user, password=db_password)
              cur = conn.cursor()
              cur.execute(sql_script)
              conn.commit()
              cur.close()
              conn.close()
              return {"status": "SQL eseguito con successo"}

  # -----------------------------
  # Custom Resource per trigger Lambda
  # -----------------------------
  InitMetadataDbCustomResource:
    Type: Custom::InitDB
    Properties:
      ServiceToken: !GetAtt InitSQLLambda.Arn
